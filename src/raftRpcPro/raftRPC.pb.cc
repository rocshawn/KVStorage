// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftRPC.proto

#include "raftRPC.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace raftRpcProctoc {
constexpr LogEntry::LogEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logterm_(0)
  , logindex_(0){}
struct LogEntryDefaultTypeInternal {
  constexpr LogEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogEntryDefaultTypeInternal _LogEntry_default_instance_;
constexpr AppendEntriesArgs::AppendEntriesArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , term_(0)
  , leaderid_(0)
  , prevlogindex_(0)
  , prevlogterm_(0)
  , leadercommit_(0){}
struct AppendEntriesArgsDefaultTypeInternal {
  constexpr AppendEntriesArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesArgsDefaultTypeInternal() {}
  union {
    AppendEntriesArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
constexpr AppendEntriesReply::AppendEntriesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(0)
  , success_(false)
  , updatenextindex_(0)
  , appstate_(0){}
struct AppendEntriesReplyDefaultTypeInternal {
  constexpr AppendEntriesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesReplyDefaultTypeInternal() {}
  union {
    AppendEntriesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
constexpr RequestVoteArgs::RequestVoteArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(0)
  , candidateid_(0)
  , lastlogindex_(0)
  , lastlogterm_(0){}
struct RequestVoteArgsDefaultTypeInternal {
  constexpr RequestVoteArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestVoteArgsDefaultTypeInternal() {}
  union {
    RequestVoteArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
constexpr RequestVoteReply::RequestVoteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(0)
  , votegranted_(false)
  , votestate_(0){}
struct RequestVoteReplyDefaultTypeInternal {
  constexpr RequestVoteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestVoteReplyDefaultTypeInternal() {}
  union {
    RequestVoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
constexpr InstallSnapshotRequest::InstallSnapshotRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leaderid_(0)
  , term_(0)
  , lastsnapshotincludeindex_(0)
  , lastsnapshotincludeterm_(0){}
struct InstallSnapshotRequestDefaultTypeInternal {
  constexpr InstallSnapshotRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstallSnapshotRequestDefaultTypeInternal() {}
  union {
    InstallSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
constexpr InstallSnapshotResponse::InstallSnapshotResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(0){}
struct InstallSnapshotResponseDefaultTypeInternal {
  constexpr InstallSnapshotResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstallSnapshotResponseDefaultTypeInternal() {}
  union {
    InstallSnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstallSnapshotResponseDefaultTypeInternal _InstallSnapshotResponse_default_instance_;
}  // namespace raftRpcProctoc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raftRPC_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raftRPC_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_raftRPC_2eproto[1];

const uint32_t TableStruct_raftRPC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::LogEntry, command_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::LogEntry, logterm_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::LogEntry, logindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, leaderid_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, entries_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesArgs, leadercommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesReply, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesReply, success_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesReply, updatenextindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::AppendEntriesReply, appstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteArgs, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteArgs, candidateid_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteArgs, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteArgs, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteReply, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteReply, votegranted_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::RequestVoteReply, votestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotRequest, leaderid_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotRequest, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotRequest, lastsnapshotincludeindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotRequest, lastsnapshotincludeterm_),
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftRpcProctoc::InstallSnapshotResponse, term_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raftRpcProctoc::LogEntry)},
  { 9, -1, -1, sizeof(::raftRpcProctoc::AppendEntriesArgs)},
  { 21, -1, -1, sizeof(::raftRpcProctoc::AppendEntriesReply)},
  { 31, -1, -1, sizeof(::raftRpcProctoc::RequestVoteArgs)},
  { 41, -1, -1, sizeof(::raftRpcProctoc::RequestVoteReply)},
  { 50, -1, -1, sizeof(::raftRpcProctoc::InstallSnapshotRequest)},
  { 61, -1, -1, sizeof(::raftRpcProctoc::InstallSnapshotResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_AppendEntriesArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_AppendEntriesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_RequestVoteArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_RequestVoteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_InstallSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcProctoc::_InstallSnapshotResponse_default_instance_),
};

const char descriptor_table_protodef_raftRPC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rraftRPC.proto\022\016raftRpcProctoc\">\n\010LogEn"
  "try\022\017\n\007Command\030\001 \001(\014\022\017\n\007LogTerm\030\002 \001(\005\022\020\n"
  "\010LogIndex\030\003 \001(\005\"\237\001\n\021AppendEntriesArgs\022\014\n"
  "\004Term\030\001 \001(\005\022\020\n\010LeaderId\030\002 \001(\005\022\024\n\014PrevLog"
  "Index\030\003 \001(\005\022\023\n\013PrevLogTerm\030\004 \001(\005\022)\n\007Entr"
  "ies\030\005 \003(\0132\030.raftRpcProctoc.LogEntry\022\024\n\014L"
  "eaderCommit\030\006 \001(\005\"^\n\022AppendEntriesReply\022"
  "\014\n\004Term\030\001 \001(\005\022\017\n\007Success\030\002 \001(\010\022\027\n\017Update"
  "NextIndex\030\003 \001(\005\022\020\n\010AppState\030\004 \001(\005\"_\n\017Req"
  "uestVoteArgs\022\014\n\004Term\030\001 \001(\005\022\023\n\013CandidateI"
  "d\030\002 \001(\005\022\024\n\014LastLogIndex\030\003 \001(\005\022\023\n\013LastLog"
  "Term\030\004 \001(\005\"H\n\020RequestVoteReply\022\014\n\004Term\030\001"
  " \001(\005\022\023\n\013VoteGranted\030\002 \001(\010\022\021\n\tVoteState\030\003"
  " \001(\005\"\211\001\n\026InstallSnapshotRequest\022\020\n\010Leade"
  "rId\030\001 \001(\005\022\014\n\004Term\030\002 \001(\005\022 \n\030LastSnapShotI"
  "ncludeIndex\030\003 \001(\005\022\037\n\027LastSnapShotInclude"
  "Term\030\004 \001(\005\022\014\n\004Data\030\005 \001(\014\"\'\n\027InstallSnaps"
  "hotResponse\022\014\n\004Term\030\001 \001(\0052\227\002\n\007raftRpc\022V\n"
  "\rAppendEntries\022!.raftRpcProctoc.AppendEn"
  "triesArgs\032\".raftRpcProctoc.AppendEntries"
  "Reply\022b\n\017InstallSnapshot\022&.raftRpcProcto"
  "c.InstallSnapshotRequest\032\'.raftRpcProcto"
  "c.InstallSnapshotResponse\022P\n\013RequestVote"
  "\022\037.raftRpcProctoc.RequestVoteArgs\032 .raft"
  "RpcProctoc.RequestVoteReplyB\003\200\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raftRPC_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftRPC_2eproto = {
  false, false, 1000, descriptor_table_protodef_raftRPC_2eproto, "raftRPC.proto", 
  &descriptor_table_raftRPC_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_raftRPC_2eproto::offsets,
  file_level_metadata_raftRPC_2eproto, file_level_enum_descriptors_raftRPC_2eproto, file_level_service_descriptors_raftRPC_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_raftRPC_2eproto_getter() {
  return &descriptor_table_raftRPC_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_raftRPC_2eproto(&descriptor_table_raftRPC_2eproto);
namespace raftRpcProctoc {

// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  ::memcpy(&logterm_, &from.logterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&logindex_) -
    reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.LogEntry)
}

inline void LogEntry::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logterm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logindex_) -
    reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.LogEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmpty();
  ::memset(&logterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logindex_) -
      reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LogTerm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          logindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Command = 1;
  if (!this->_internal_command().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_command(), target);
  }

  // int32 LogTerm = 2;
  if (this->_internal_logterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logterm(), target);
  }

  // int32 LogIndex = 3;
  if (this->_internal_logindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_logindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  // int32 LogTerm = 2;
  if (this->_internal_logterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logterm());
  }

  // int32 LogIndex = 3;
  if (this->_internal_logindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }

void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogEntry *>(to)->MergeFrom(
      static_cast<const LogEntry &>(from));
}


void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (from._internal_logterm() != 0) {
    _internal_set_logterm(from._internal_logterm());
  }
  if (from._internal_logindex() != 0) {
    _internal_set_logindex(from._internal_logindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, logindex_)
      + sizeof(LogEntry::logindex_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, logterm_)>(
          reinterpret_cast<char*>(&logterm_),
          reinterpret_cast<char*>(&other->logterm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[0]);
}

// ===================================================================

class AppendEntriesArgs::_Internal {
 public:
};

AppendEntriesArgs::AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.AppendEntriesArgs)
}

inline void AppendEntriesArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.AppendEntriesArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesArgs::ArenaDtor(void* object) {
  AppendEntriesArgs* _this = reinterpret_cast< AppendEntriesArgs* >(object);
  (void)_this;
}
void AppendEntriesArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.AppendEntriesArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PrevLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PrevLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .raftRpcProctoc.LogEntry Entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 LeaderCommit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.AppendEntriesArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 LeaderId = 2;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderid(), target);
  }

  // int32 PrevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prevlogindex(), target);
  }

  // int32 PrevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prevlogterm(), target);
  }

  // repeated .raftRpcProctoc.LogEntry Entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  // int32 LeaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.AppendEntriesArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftRpcProctoc.LogEntry Entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 LeaderId = 2;
  if (this->_internal_leaderid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderid());
  }

  // int32 PrevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogindex());
  }

  // int32 PrevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogterm());
  }

  // int32 LeaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leadercommit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesArgs::GetClassData() const { return &_class_data_; }

void AppendEntriesArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendEntriesArgs *>(to)->MergeFrom(
      static_cast<const AppendEntriesArgs &>(from));
}


void AppendEntriesArgs::MergeFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_prevlogindex() != 0) {
    _internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from._internal_prevlogterm() != 0) {
    _internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from._internal_leadercommit() != 0) {
    _internal_set_leadercommit(from._internal_leadercommit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  return true;
}

void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, leadercommit_)
      + sizeof(AppendEntriesArgs::leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[1]);
}

// ===================================================================

class AppendEntriesReply::_Internal {
 public:
};

AppendEntriesReply::AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&appstate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.AppendEntriesReply)
}

inline void AppendEntriesReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appstate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.AppendEntriesReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesReply::ArenaDtor(void* object) {
  AppendEntriesReply* _this = reinterpret_cast< AppendEntriesReply* >(object);
  (void)_this;
}
void AppendEntriesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 UpdateNextIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          updatenextindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AppState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          appstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 UpdateNextIndex = 3;
  if (this->_internal_updatenextindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_updatenextindex(), target);
  }

  // int32 AppState = 4;
  if (this->_internal_appstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_appstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.AppendEntriesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 UpdateNextIndex = 3;
  if (this->_internal_updatenextindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_updatenextindex());
  }

  // int32 AppState = 4;
  if (this->_internal_appstate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesReply::GetClassData() const { return &_class_data_; }

void AppendEntriesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendEntriesReply *>(to)->MergeFrom(
      static_cast<const AppendEntriesReply &>(from));
}


void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_updatenextindex() != 0) {
    _internal_set_updatenextindex(from._internal_updatenextindex());
  }
  if (from._internal_appstate() != 0) {
    _internal_set_appstate(from._internal_appstate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReply, appstate_)
      + sizeof(AppendEntriesReply::appstate_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReply, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[2]);
}

// ===================================================================

class RequestVoteArgs::_Internal {
 public:
};

RequestVoteArgs::RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.RequestVoteArgs)
}

inline void RequestVoteArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.RequestVoteArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestVoteArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteArgs::ArenaDtor(void* object) {
  RequestVoteArgs* _this = reinterpret_cast< RequestVoteArgs* >(object);
  (void)_this;
}
void RequestVoteArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.RequestVoteArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CandidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.RequestVoteArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 CandidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidateid(), target);
  }

  // int32 LastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int32 LastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.RequestVoteArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 CandidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_candidateid());
  }

  // int32 LastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogindex());
  }

  // int32 LastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestVoteArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteArgs::GetClassData() const { return &_class_data_; }

void RequestVoteArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestVoteArgs *>(to)->MergeFrom(
      static_cast<const RequestVoteArgs &>(from));
}


void RequestVoteArgs::MergeFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_candidateid() != 0) {
    _internal_set_candidateid(from._internal_candidateid());
  }
  if (from._internal_lastlogindex() != 0) {
    _internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from._internal_lastlogterm() != 0) {
    _internal_set_lastlogterm(from._internal_lastlogterm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  return true;
}

void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteArgs, lastlogterm_)
      + sizeof(RequestVoteArgs::lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteArgs, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[3]);
}

// ===================================================================

class RequestVoteReply::_Internal {
 public:
};

RequestVoteReply::RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votestate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.RequestVoteReply)
}

inline void RequestVoteReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&votestate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.RequestVoteReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestVoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteReply::ArenaDtor(void* object) {
  RequestVoteReply* _this = reinterpret_cast< RequestVoteReply* >(object);
  (void)_this;
}
void RequestVoteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.RequestVoteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votestate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool VoteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 VoteState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          votestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.RequestVoteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool VoteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  // int32 VoteState = 3;
  if (this->_internal_votestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_votestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.RequestVoteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool VoteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 1 + 1;
  }

  // int32 VoteState = 3;
  if (this->_internal_votestate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_votestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestVoteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteReply::GetClassData() const { return &_class_data_; }

void RequestVoteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestVoteReply *>(to)->MergeFrom(
      static_cast<const RequestVoteReply &>(from));
}


void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_votegranted() != 0) {
    _internal_set_votegranted(from._internal_votegranted());
  }
  if (from._internal_votestate() != 0) {
    _internal_set_votestate(from._internal_votestate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteReply, votestate_)
      + sizeof(RequestVoteReply::votestate_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteReply, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[4]);
}

// ===================================================================

class InstallSnapshotRequest::_Internal {
 public:
};

InstallSnapshotRequest::InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.InstallSnapshotRequest)
}
InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&leaderid_, &from.leaderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
    reinterpret_cast<char*>(&leaderid_)) + sizeof(lastsnapshotincludeterm_));
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.InstallSnapshotRequest)
}

inline void InstallSnapshotRequest::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leaderid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
    reinterpret_cast<char*>(&leaderid_)) + sizeof(lastsnapshotincludeterm_));
}

InstallSnapshotRequest::~InstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.InstallSnapshotRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstallSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstallSnapshotRequest::ArenaDtor(void* object) {
  InstallSnapshotRequest* _this = reinterpret_cast< InstallSnapshotRequest* >(object);
  (void)_this;
}
void InstallSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstallSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.InstallSnapshotRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&leaderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
      reinterpret_cast<char*>(&leaderid_)) + sizeof(lastsnapshotincludeterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 LeaderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastSnapShotIncludeIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lastsnapshotincludeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastSnapShotIncludeTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          lastsnapshotincludeterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstallSnapshotRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.InstallSnapshotRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 LeaderId = 1;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leaderid(), target);
  }

  // int32 Term = 2;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_term(), target);
  }

  // int32 LastSnapShotIncludeIndex = 3;
  if (this->_internal_lastsnapshotincludeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastsnapshotincludeindex(), target);
  }

  // int32 LastSnapShotIncludeTerm = 4;
  if (this->_internal_lastsnapshotincludeterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastsnapshotincludeterm(), target);
  }

  // bytes Data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.InstallSnapshotRequest)
  return target;
}

size_t InstallSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.InstallSnapshotRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 LeaderId = 1;
  if (this->_internal_leaderid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderid());
  }

  // int32 Term = 2;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 LastSnapShotIncludeIndex = 3;
  if (this->_internal_lastsnapshotincludeindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lastsnapshotincludeindex());
  }

  // int32 LastSnapShotIncludeTerm = 4;
  if (this->_internal_lastsnapshotincludeterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lastsnapshotincludeterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallSnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstallSnapshotRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallSnapshotRequest::GetClassData() const { return &_class_data_; }

void InstallSnapshotRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstallSnapshotRequest *>(to)->MergeFrom(
      static_cast<const InstallSnapshotRequest &>(from));
}


void InstallSnapshotRequest::MergeFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.InstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_lastsnapshotincludeindex() != 0) {
    _internal_set_lastsnapshotincludeindex(from._internal_lastsnapshotincludeindex());
  }
  if (from._internal_lastsnapshotincludeterm() != 0) {
    _internal_set_lastsnapshotincludeterm(from._internal_lastsnapshotincludeterm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallSnapshotRequest::CopyFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequest::IsInitialized() const {
  return true;
}

void InstallSnapshotRequest::InternalSwap(InstallSnapshotRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, lastsnapshotincludeterm_)
      + sizeof(InstallSnapshotRequest::lastsnapshotincludeterm_)
      - PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, leaderid_)>(
          reinterpret_cast<char*>(&leaderid_),
          reinterpret_cast<char*>(&other->leaderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[5]);
}

// ===================================================================

class InstallSnapshotResponse::_Internal {
 public:
};

InstallSnapshotResponse::InstallSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raftRpcProctoc.InstallSnapshotResponse)
}
InstallSnapshotResponse::InstallSnapshotResponse(const InstallSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:raftRpcProctoc.InstallSnapshotResponse)
}

inline void InstallSnapshotResponse::SharedCtor() {
term_ = 0;
}

InstallSnapshotResponse::~InstallSnapshotResponse() {
  // @@protoc_insertion_point(destructor:raftRpcProctoc.InstallSnapshotResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstallSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InstallSnapshotResponse::ArenaDtor(void* object) {
  InstallSnapshotResponse* _this = reinterpret_cast< InstallSnapshotResponse* >(object);
  (void)_this;
}
void InstallSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstallSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcProctoc.InstallSnapshotResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstallSnapshotResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcProctoc.InstallSnapshotResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcProctoc.InstallSnapshotResponse)
  return target;
}

size_t InstallSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcProctoc.InstallSnapshotResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallSnapshotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstallSnapshotResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallSnapshotResponse::GetClassData() const { return &_class_data_; }

void InstallSnapshotResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstallSnapshotResponse *>(to)->MergeFrom(
      static_cast<const InstallSnapshotResponse &>(from));
}


void InstallSnapshotResponse::MergeFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcProctoc.InstallSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallSnapshotResponse::CopyFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcProctoc.InstallSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResponse::IsInitialized() const {
  return true;
}

void InstallSnapshotResponse::InternalSwap(InstallSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raftRPC_2eproto_getter, &descriptor_table_raftRPC_2eproto_once,
      file_level_metadata_raftRPC_2eproto[6]);
}

// ===================================================================

raftRpc::~raftRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* raftRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raftRPC_2eproto);
  return file_level_service_descriptors_raftRPC_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* raftRpc::GetDescriptor() {
  return descriptor();
}

void raftRpc::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftRpcProctoc::AppendEntriesArgs*,
                         ::raftRpcProctoc::AppendEntriesReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AppendEntries() not implemented.");
  done->Run();
}

void raftRpc::InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftRpcProctoc::InstallSnapshotRequest*,
                         ::raftRpcProctoc::InstallSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InstallSnapshot() not implemented.");
  done->Run();
}

void raftRpc::RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftRpcProctoc::RequestVoteArgs*,
                         ::raftRpcProctoc::RequestVoteReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestVote() not implemented.");
  done->Run();
}

void raftRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_raftRPC_2eproto[0]);
  switch(method->index()) {
    case 0:
      AppendEntries(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftRpcProctoc::AppendEntriesArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftRpcProctoc::AppendEntriesReply*>(
                 response),
             done);
      break;
    case 1:
      InstallSnapshot(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftRpcProctoc::InstallSnapshotRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftRpcProctoc::InstallSnapshotResponse*>(
                 response),
             done);
      break;
    case 2:
      RequestVote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftRpcProctoc::RequestVoteArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftRpcProctoc::RequestVoteReply*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& raftRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftRpcProctoc::AppendEntriesArgs::default_instance();
    case 1:
      return ::raftRpcProctoc::InstallSnapshotRequest::default_instance();
    case 2:
      return ::raftRpcProctoc::RequestVoteArgs::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& raftRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftRpcProctoc::AppendEntriesReply::default_instance();
    case 1:
      return ::raftRpcProctoc::InstallSnapshotResponse::default_instance();
    case 2:
      return ::raftRpcProctoc::RequestVoteReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

raftRpc_Stub::raftRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
raftRpc_Stub::raftRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
raftRpc_Stub::~raftRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void raftRpc_Stub::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftRpcProctoc::AppendEntriesArgs* request,
                              ::raftRpcProctoc::AppendEntriesReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void raftRpc_Stub::InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftRpcProctoc::InstallSnapshotRequest* request,
                              ::raftRpcProctoc::InstallSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void raftRpc_Stub::RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftRpcProctoc::RequestVoteArgs* request,
                              ::raftRpcProctoc::RequestVoteReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raftRpcProctoc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::LogEntry* Arena::CreateMaybeMessage< ::raftRpcProctoc::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::AppendEntriesArgs* Arena::CreateMaybeMessage< ::raftRpcProctoc::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::AppendEntriesArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::AppendEntriesReply* Arena::CreateMaybeMessage< ::raftRpcProctoc::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::AppendEntriesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::RequestVoteArgs* Arena::CreateMaybeMessage< ::raftRpcProctoc::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::RequestVoteArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::RequestVoteReply* Arena::CreateMaybeMessage< ::raftRpcProctoc::RequestVoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::RequestVoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::InstallSnapshotRequest* Arena::CreateMaybeMessage< ::raftRpcProctoc::InstallSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::InstallSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcProctoc::InstallSnapshotResponse* Arena::CreateMaybeMessage< ::raftRpcProctoc::InstallSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcProctoc::InstallSnapshotResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
